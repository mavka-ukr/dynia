взяти "дід"
взяти "фс"

js """
var м___диня__прочитати_всі_файли__;

await ((async function() {
  var { default: fs } = await import('fs');

  м___диня__прочитати_всі_файли__ = mavka_diia(
    '__диня__прочитати_всі_файли__',
    {
      'шлях': mavka_param(0, м_текст)
    },
    function(args, di, { arg }) {
      var path = arg('шлях');
      var files = fs.readdirSync(path);
      var result = [];
      for (var i = 0; i < files.length; i++) {
        var file = files[i];
        var filePath = path + '/' + file;
        var fileContent = fs.readFileSync(filePath, 'utf8');
        result.push(fileContent);
      }
      return result;
    }
  );
})());
"""
макет дія __диня__прочитати_всі_файли__(шлях текст) список

структура ПомилкаДині є Помилка
кінець

ПД_1 = ПомилкаДині("ПД-1: щоб покласти значення, необхідно вказати місце")
ПД_2 = ПомилкаДині("ПД-2: щоб отримати значення, необхідно вказати місце")
ПД_3 = ПомилкаДині("ПД-3: щоб видалити значення, необхідно вказати місце")
ПД_4 = (місце): ПомилкаДині("""ПД-4: обʼєкт на місці "%(місце)" вже існує""")
ПД_5 = (місце): ПомилкаДині("""ПД-5: обʼєкт на місці "%(місце)" не існує""")

структура Диня
  шлях текст = "~/.данідині/спільне"
  тип щось = словник

  ;; покласти(значення щось, місце текст або список або пусто = пусто) ніщо
  ;; додати(значення щось, місце текст або список або пусто = пусто) ніщо
  ;; змінити(значення щось, місце текст або список або пусто = пусто) ніщо
  ;; отримати(місце щось) щось
  ;; отримати_все() список
  ;; видалити(місце щось) ніщо
  ;; видалити_все() ніщо
  ;; перевірити(місце щось) логічне
кінець

тривала дія Диня.покласти(значення щось, місце щось або пусто = пусто) ніщо
  якщо місце є пусто
    якщо значення містить "місце"
      місце = значення.місце
    інакше
      впасти ПД_1
    кінець
  кінець
  якщо місце є список
    місце = місце.зʼєднати("/")
  кінець
  якщо місце не є текст
    місце = текст(місце)
  кінець
  шлях = я.шлях
  якщо шлях.закінчується_на("/")
    шлях = шлях.зрізати(0, шлях.довжина - 1)
  кінець
  якщо !(чекати фс.існує(шлях))
    чекати фс.створити_папку_рекурсивно(шлях)
  кінець
  шлях = шлях + "/" + місце + ".дід"
  сирі_дані = дід.зібрати(значення)
  чекати фс.записати(шлях, сирі_дані)
кінець

тривала дія Диня.додати(значення щось, місце щось або пусто = пусто) ніщо
  якщо місце є пусто
    якщо значення містить "місце"
      місце = значення.місце
    інакше
      впасти ПД_1
    кінець
  кінець
  якщо місце є список
    місце = місце.зʼєднати("/")
  кінець
  якщо місце не є текст
    місце = текст(місце)
  кінець
  шлях = я.шлях
  якщо шлях.закінчується_на("/")
    шлях = шлях.зрізати(0, шлях.довжина - 1)
  кінець
  якщо !(чекати фс.існує(шлях))
    чекати фс.створити_папку_рекурсивно(шлях)
  кінець
  шлях = шлях + "/" + місце + ".дід"
  сирі_дані = дід.зібрати(значення)
  якщо (чекати фс.існує(шлях))
    впасти ПД_4(місце)
  кінець
  чекати фс.записати(шлях, сирі_дані)
кінець

тривала дія Диня.змінити(значення щось, місце щось або пусто = пусто) ніщо
  якщо місце є пусто
    якщо значення містить "місце"
      місце = значення.місце
    інакше
      впасти ПД_1
    кінець
  кінець
  якщо місце є список
    місце = місце.зʼєднати("/")
  кінець
  якщо місце не є текст
    місце = текст(місце)
  кінець
  шлях = я.шлях
  якщо шлях.закінчується_на("/")
    шлях = шлях.зрізати(0, шлях.довжина - 1)
  кінець
  шлях = шлях + "/" + місце + ".дід"
  сирі_дані = дід.зібрати(значення)
  якщо !(чекати фс.існує(шлях))
    впасти ПД_5(місце)
  кінець
  чекати фс.записати(шлях, сирі_дані)
кінець

тривала дія Диня.отримати(місце щось або пусто = пусто) щось
  якщо місце є пусто
    впасти ПД_2
  кінець
  якщо місце є список
    місце = місце.зʼєднати("/")
  кінець
  якщо місце не є текст
    місце = текст(місце)
  кінець
  шлях = я.шлях
  якщо шлях.закінчується_на("/")
    шлях = шлях.зрізати(0, шлях.довжина - 1)
  кінець
  шлях = шлях + "/" + місце + ".дід"
  якщо !(чекати фс.існує(шлях))
    вернути пусто
  кінець
  чекати сирі_дані = фс.прочитати_текст(шлях)
  якщо сирі_дані є пусто
    вернути пусто
  кінець
  вернути дід.розібрати(сирі_дані)
кінець

тривала дія Диня.отримати_все() список
  шлях = я.шлях
  якщо шлях.закінчується_на("/")
    шлях = шлях.зрізати(0, шлях.довжина - 1)
  кінець
  файли = __диня__прочитати_всі_файли__(шлях)
  результат = []
  перебрати файли як файл
    результат.додати(дід.розібрати(файл))
  кінець
  вернути результат
кінець

тривала дія Диня.видалити(місце щось або пусто = пусто) ніщо
  якщо місце є пусто
    впасти ПД_3
  кінець
  якщо місце є список
    місце = місце.зʼєднати("/")
  кінець
  якщо місце не є текст
    місце = текст(місце)
  кінець
  шлях = я.шлях
  якщо шлях.закінчується_на("/")
    шлях = шлях.зрізати(0, шлях.довжина - 1)
  кінець
  шлях = шлях + "/" + місце + ".дід"
  якщо !(чекати фс.існує(шлях))
    вернути пусто
  кінець
  чекати фс.видалити(шлях)
кінець

тривала дія Диня.видалити_все() ніщо
  шлях = я.шлях
  якщо шлях.закінчується_на("/")
    шлях = шлях.зрізати(0, шлях.довжина - 1)
  кінець
  чекати фс.видалити_папку_рекурсивно(шлях)
  чекати фс.створити_папку_рекурсивно(шлях)
кінець

тривала дія Диня.перевірити(місце щось або пусто = пусто) логічне
  якщо місце є пусто
    впасти ПД_2
  кінець
  якщо місце є список
    місце = місце.зʼєднати("/")
  кінець
  якщо місце не є текст
    місце = текст(місце)
  кінець
  шлях = я.шлях
  якщо шлях.закінчується_на("/")
    шлях = шлях.зрізати(0, шлях.довжина - 1)
  кінець
  шлях = шлях + "/" + місце + ".дід"
  вернути чекати фс.існує(шлях)
кінець

дати Диня
